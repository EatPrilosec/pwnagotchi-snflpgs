#
# Install nexmon brcmfmac firmware and drivers from source as needed
#

#vars:
#  nexmon:
#    repo:
#      url: "https://github.com/DrSchottky/nexmon.git"

- name: "Check for /lib/modules/{{ board.kernel }}/build to see if we can build"
  ansible.builtin.stat: path="/lib/modules/{{board.kernel}}/build"
  register: kernel_headers

- name: "Kernel {{board.kernel}} exists; installing nexmon"
  when:
    - kernel_headers.stat.exists
  block:
    - name: "Check for staged firmware {{ board.firmware }}"
      when: staging is defined
      stat: path="{{ staging }}/firmware/{{ board.firmware }}"
      register: firmware

    - name: "Check for staged kernel module {{ board.kernel }}/brcmfmac.ko"
      when: staging is defined
      stat: path="{{ staging }}/modules/{{ board.kernel }}/brcmfmac.ko"
      register: kmodule

    - name: "Check for {{ staging }}/bin/nexutil"
      when: staging is defined
      stat: path="{{ staging }}/bin/nexutil"
      register: nexutil

    - name: Build nexmon as needed
      environment:
        CC: "arm-none-eabi-"
        NEXMON_ROOT: "/usr/local/src/nexmon"
        CCPLUGIN: "/usr/local/src/nexmon/buildtools/gcc-nexmon-plugin-arm/nexmon.so"
        ZLIBFLATE: "zlib-flate -compress"
        Q: "@"
        NEXMON_SETUP_ENV: 1
        HOSTUNAME: "Linux"
        PLATFORMUNAME: "{{board.arch}}"
      when:
        - not firmware.stat.exists or not kmodule.stat.exists or not nexutil.stat.exists
      block:  

        - name: Check for existence of nexmon repo
          stat: path="/usr/local/src/nexmon"
          register: nexmongit

        - name: clone nexmon repository
          when: not nexmongit.stat.exists
          git:
            repo: "https://github.com/Sniffleupagus/nexmon.git"
            #"{{ nexmon.repo.url }}"
            dest: /usr/local/src/nexmon
          register: nexmongit

        # -DDEBUG breaks nexmon on armbian, but we don't really need it anywhere
        #
        # can these two lineinfiles be replaced with a "replace" that matches "\.*-DDEBUG"
        # and replaces with "" ?
        #
        # - name: "Disable nexmon -DDEBUG"
        #   when: nexmongit.changed
        #   replace:
        #     path: "/usr/local/src/nexmon/patches/driver/brcmfmac_6.1.y-nexmon/Makefile"
        #     regexp: '(\\[ \n\t]*)?-DDEBUG'
        #     replace: ''
        #
        - name: "Remove -DDEBUG from Makefile"
          when: nexmongit.changed
          ansible.builtin.lineinfile:
            path: "/usr/local/src/nexmon/patches/driver/brcmfmac_6.1.y-nexmon/Makefile"
            regexp: '-DDEBUG$'
            state: absent

        - name: 'Remove \ from end of line before where -DDEBUG was'
          when: nexmongit.changed
          ansible.builtin.lineinfile:
            path: "/usr/local/src/nexmon/patches/driver/brcmfmac_6.1.y-nexmon/Makefile"
            regexp: 'patches.driver.brcmfmac_6\.1\.y-nexmon.include.*'
            line: "       -I$(NEXMON_ROOT)/patches/driver/brcmfmac_6.1.y-nexmon/include"

        - name: "{{board.name}} nexmon: top level make"
          when: nexmongit.changed
          make:
            chdir: /usr/local/src/nexmon/

        - name: "Build firmware if needed"
          when: not firmware.stat.exists
          environment:
            QEMU_UNAME: "{{ board.kernel }}"
            ARCHFLAGS: "-arch {{ board.arch }}"
          block:
            - name: "{{board.patch}} firmware: make clean"
              make:
                chdir: "/usr/local/src/nexmon/patches/{{board.patch}}/nexmon"
                targets:
                  - clean
                  - all

            - name: create firmware staging dir
              when: staging is defined
              file:
                state: directory
                path: "{{ staging }}/firmware"

            - name: 'copy firmware {{ board.firmware }} to staging directory'
              when: staging is defined
              copy:
                src: '/usr/local/src/nexmon/patches/{{ board.patch }}/nexmon/{{ board.firmware }}'
                dest: '{{ staging }}/firmware/'
                follow: true

        - name: Build module as needed
          when: not kmodule.stat.exists
          environment:
            QEMU_UNAME: "{{ board.kernel }}"
            ARCHFLAGS: "-arch {{ board.arch }}"
          block:
            # if not firmware.stat.exists, then module would have been built above, so don't make it again
            - name: "make brcmfmac.ko module {{ board.kernel }}"
              when: firmware.stat.exists
              make:
                chdir: "/usr/local/src/nexmon/patches/{{ board.patch }}/nexmon/"
                targets:
                  - clean
                  - brcmfmac.ko

            - name: create modules staging dir
              when: staging is defined
              file:
                state: directory
                path: "{{ staging }}/modules/{{ board.kernel }}"

            - name: copy modified driver to staging
              when: staging is defined
              copy:
                src: "/usr/local/src/nexmon/patches/driver/brcmfmac_{{ kernel.min }}.y-nexmon/brcmfmac.ko"
                dest: "{{ staging }}/modules/{{ board.kernel }}/brcmfmac.ko"
                follow: true
              register: brcmfmac_installed

        - name: build and install nexutil
          when: not nexutil.stat.exists
          block:
            - name: make nexutil
              make:
                chdir: "/usr/local/src/nexmon/utilities/nexutil"

            - name: create bin staging dir
              when: staging is defined
              file:
                state: directory
                path: "{{ staging }}/bin"

            - name: copy nexutil to staging directory
              when: staging is defined
              copy:
                src: /usr/local/src/nexmon/utilities/nexutil/nexutil
                dest: "{{ staging }}/bin/"

    # end of nexmon build block. products should now be in staging if they were not already

# check for staged firmware to install
- name: "Check for staged firmware {{ board.firmware }}"
  stat: path="{{ staging }}/firmware/{{ board.firmware }}"
  register: firmware

# install nexmon firmware from staging directory
- name: "install nexmon firmware {{ board.firmware }}"
  when: firmware.stat.exists
  copy:
    src: "{{ staging }}/firmware/{{ board.firmware }}"
    dest: "/usr/lib/firmware/brcm/{{ board.firmware }}"
    follow: true

- name: "Check for staged kernel module {{ board.kernel }}/brcmfmac.ko"
  stat: path="{{ staging }}/modules/{{ board.kernel }}/brcmfmac.ko"
  register: kmodule

- name: "Check for backup of original brcmfmac.ko"
  stat: path="/usr/lib/modules/{{ board.kernel }}/kernel/drivers/net/wireless/broadcom/brcm80211/brcmfmac/brcmfmac.ko.bak"
  register: kmodule_bak

- name: "Check for backup of original brcmfmac.ko.xz"
  stat: path="/usr/lib/modules/{{ board.kernel }}/kernel/drivers/net/wireless/broadcom/brcm80211/brcmfmac/brcmfmac.ko.xz.bak"
  register: kmodule_xz_bak

- name: "Install kernel module {{ board.kernel }}/brcmfmac.ko from staging, if not already"
  when:
    - kmodule.stat.exists
    - not kmodule_bak.stat.exists or not kmodule_xz_bak.stat.exists
  block:
    # back up originals, and keep track
    - name: "Back up old compressed kernel module (if there)"
      copy:
        src: "/usr/lib/modules/{{ board.kernel }}/kernel/drivers/net/wireless/broadcom/brcm80211/brcmfmac/brcmfmac.ko.xz"
        dest: "/usr/lib/modules/{{ board.kernel }}/kernel/drivers/net/wireless/broadcom/brcm80211/brcmfmac/brcmfmac.ko.xz.bak"
      register: brcmfmac_ko_xz
      ignore_errors: true

    - name: "Back up old uncompressed kernel module (if there)"
      copy:
        src: "/usr/lib/modules/{{ board.kernel }}/kernel/drivers/net/wireless/broadcom/brcm80211/brcmfmac/brcmfmac.ko"
        dest: "/usr/lib/modules/{{ board.kernel }}/kernel/drivers/net/wireless/broadcom/brcm80211/brcmfmac/brcmfmac.ko.bak"
      register: brcmfmac_ko
      ignore_errors: true

    - name: "install nexmon kernel driver {{board.kernel}}"
      copy:
        src: "{{ staging }}/modules/{{ board.kernel }}/brcmfmac.ko"
        dest: "/usr/lib/modules/{{ board.kernel }}/kernel/drivers/net/wireless/broadcom/brcm80211/brcmfmac/brcmfmac.ko"
        follow: true
      register: brcmfmac_installed

    - name: "xz compress driver: {{brcmfmac_ko_xz.changed}}"
      when: brcmfmac_ko_xz.changed
      command: xz -f -k brcmfmac.ko
      args:
        chdir: '/usr/lib/modules/{{ board.kernel }}/kernel/drivers/net/wireless/broadcom/brcm80211/brcmfmac'

    - name: "remove uncompressed driver: {{brcmfmac_ko.changed}}"
      when: not brcmfmac_ko.changed
      file:
        state: absent
        path: "/usr/lib/modules/{{ board.kernel }}/kernel/drivers/net/wireless/broadcom/brcm80211/brcmfmac/brcmfmac.ko"

    - name: update module dependencies
      command: "/sbin/depmod -a {{ board.kernel }}"

# nexutil command line utility
- name: "Check for {{ staging }}/bin/nexutil"
  stat: path="{{ staging }}/bin/nexutil"
  register: nexutil_staged

- name: "Check for /usr/local/bin/nexutil"
  stat: path="/usr/local/bin/nexutil"
  register: nexutil_installed

- name: "Install {{ staging}}/bin/nexutil to /usr/local/bin"
  when: nexutil_staged.stat.exists and not nexutil_installed.stat.exists
  copy:
    src: "{{ staging }}/bin/nexutil"
    dest: /usr/local/bin/
    mode: '755'
    follow: true

# some pizero2w have the pizeroW wifi chip
# could this be a link instead of a copy? and force, only if not a link?
- name: copy 43430-sdio as 43436s-sdio for the special 43430/1 /2
  copy:
    src: /usr/lib/firmware/brcm/brcmfmac43430-sdio.bin
    dest: /usr/lib/firmware/brcm/brcmfmac43436s-sdio.bin
    follow: true
  tags:
    - no_orangepi
    - no_bananapi
  ignore_errors: true

# delete blob files that make nexmon sad
- name: Delete the firmware blob files to avoid some nexmon crashing
  file:
    state: absent
    path: '{{ blob }}'
  loop_control:
    loop_var: blob
    label: "{{blob | basename}}"
  loop:
    - /usr/lib/firmware/brcm/brcmfmac43430-sdio.clm_blob
    - /usr/lib/firmware/brcm/brcmfmac43430-sdio.raspberrypi,model-zero-w.clm_blob
    - /usr/lib/firmware/brcm/brcmfmac43430b0-sdio.raspberrypi,model-zero-2-w.clm_blob
    - /usr/lib/firmware/brcm/brcmfmac43436-sdio.raspberrypi,model-zero-2-w.clm_blob
    - /usr/lib/firmware/brcm/brcmfmac43430-sdio.raspberrypi,3-model-b.clm_blob
  tags: no_orangepi

